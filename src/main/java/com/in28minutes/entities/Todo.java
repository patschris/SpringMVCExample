package com.in28minutes.entities;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.Size;
import java.util.Date;
import java.util.Objects;

import static com.in28minutes.configuration.DateFormat.DATE_PATTERN;
import static com.in28minutes.configuration.DateFormat.DATE_TIMEZONE;
import static com.in28minutes.configuration.DateFormat.DATE_FORMAT;

/**
 * The Todo class.
 *
 * @author Christos Patsouras
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="todo")
public class Todo {
    /**
     * The Todo's id, generated by the sequence todo_id_seq.
     */
    @Id
    @GeneratedValue(generator = "todo_id_seq")
    @SequenceGenerator(name="todo_id_seq", sequenceName = "todo_id_seq", allocationSize = 1)
    private Integer id;

    /**
     * The Todo's description. Must be at least 6 characters long.
     */
    @Size(min = 6, message = "Enter at least 6 characters")
    private String description;

    /**
     * The Todo's target completion date.
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern=DATE_PATTERN, timezone = DATE_TIMEZONE)
    private Date targetDate;

    /**
     * A flag that indicates whether the Todo is done or not.
     */
    private boolean done;

    /**
     * The many-to-one relationship with the users table.
     */
    @ManyToOne
    @JoinColumn(name = "users")
    @JsonManagedReference
    private Users users;

    /**
     * Todo's constructor without the auto-generated id.
     *
     * @param description
     *          The Todo's description. Must be at least 6 characters long.
     * @param targetDate
     *          The Todo's target completion date.
     * @param done
     *          A flag that indicates whether the Todo is done or not.
     * @param users
     *          The user related with this Todo.
     */
    public Todo(String description, Date targetDate, boolean done, Users users) {
        this.description = description;
        this.targetDate = targetDate;
        this.done = done;
        this.users = users;
    }

    /**
     * Todo's constructor only with user.
     *
     * @param users
     *          The user related with this Todo.
     */
    public Todo(Users users) {
        this.users = users;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Todo todo = (Todo) o;
        return done == todo.done &&
                id.equals(todo.id) &&
                description.equals(todo.description) &&
                targetDate.equals(todo.targetDate) &&
                users.equals(todo.users);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, description, targetDate, done, users);
    }

    @Override
    public String toString() {
        String userString = users!=null ? users.toString():"Users{}";
        String date = targetDate != null ? DATE_FORMAT.format(targetDate) : null;
        return "Todo{" +
                "id=" + id +
                ", description='" + description + "'" +
                ", targetDate=" + date+
                ", done=" + done +
                ", users=" + userString +
                '}';
    }
}